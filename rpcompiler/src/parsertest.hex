% -------------------- Mappings -------------------- 
% Belief base "kb1"
sources(kb1, AnswerNr) :- &hex["
     pred1(a, b, c, \'d\').
     pred2(x, y).
"](AnswerNr).


% -------------------- Revision plan -------------------- 
% Using belief base kb1
results(result_kb1, AnswerNr) :- sources(kb1, AnswerNr).

% Using belief base kb2
results(result_kb2, AnswerNr) :- sources(kb2, AnswerNr).

% Using belief base kb3
results(result_kb3, AnswerNr) :- sources(kb3, AnswerNr).

% Using belief base kb4
results(result_kb4, AnswerNr) :- sources(kb4, AnswerNr).

 % Merging the following sources: result_kb3, result_kb4
 %    Answers passed to the operator
ansarg_kb3_kb4(R1) :- results(result_kb3, R1).
ansarg_kb3_kb4(R2) :- results(result_kb4, R2).
 %    key-value rguments for the operator

 %    Actual merging
results(result_kb3_kb4, AnswerNr) :- &operator["union", ansarg_kb3_kb4, oparg_kb3_kb4](AnswerNr).

 % Merging the following sources: result_kb1, result_kb2, result_kb3_kb4
 %    Answers passed to the operator
ansarg_kb1_kb2_kb3_kb4(R1) :- results(result_kb1, R1).
ansarg_kb1_kb2_kb3_kb4(R2) :- results(result_kb2, R2).
ansarg_kb1_kb2_kb3_kb4(R3) :- results(result_kb3_kb4, R3).
 %    key-value rguments for the operator
oparg_kb1_kb2_kb3_kb4(test,"x  \'yz").
oparg_kb1_kb2_kb3_kb4(constraint,abc).
 %    Actual merging
results(result_kb1_kb2_kb3_kb4, AnswerNr) :- &operator["union", ansarg_kb1_kb2_kb3_kb4, oparg_kb1_kb2_kb3_kb4](AnswerNr).

% Final result
finalresult(AnswerNr) :- results(result_kb1_kb2_kb3_kb4, AnswerNr).


% ---------- Extraction of final answer sets ---------- 
finalanswersets(AnswerNr, AnswerSetNr) :- finalresult(AnswerNr), &answersets[AnswerNr](AnswerSetNr).
% Each answer set can be selected or not
selectedas(AnswerSetNr) v -selectedas(AnswerSetNr) :- finalanswersets(AnswerNr, AnswerSetNr).

% Select exactly one:
%    Select at least one
atleastoneasselected :- selectedas(AnswerSetNr).
:- not atleastoneasselected.
%    Select at most one
:- selectedas(AnswerSetNr1), selectedas(AnswerSetNr2), AnswerSetNr1 != AnswerSetNr2.

% Take content of the selected virtual answer set and transfer it into the "real" answer sets of the hex program
%    pred1 with arity 4
pred1(Arg0, Arg1, Arg2, Arg3) :- finalresult(AnswerNr), selectedas(AnswerSetNr), &tuples[AnswerNr, AnswerSetNr]("pred1", 4), &arguments[AnswerNr, AnswerSetNr, "pred1"](RunningNr, 0, Arg0), &arguments[AnswerNr, AnswerSetNr, "pred1"](RunningNr, 1, Arg1), &arguments[AnswerNr, AnswerSetNr, "pred1"](RunningNr, 2, Arg2), &arguments[AnswerNr, AnswerSetNr, "pred1"](RunningNr, 3, Arg3).
%    pred2 with arity 2
pred2(Arg0, Arg1) :- finalresult(AnswerNr), selectedas(AnswerSetNr), &tuples[AnswerNr, AnswerSetNr]("pred2", 2), &arguments[AnswerNr, AnswerSetNr, "pred2"](RunningNr, 0, Arg0), &arguments[AnswerNr, AnswerSetNr, "pred2"](RunningNr, 1, Arg1).


% -------------------- Additional information --------------------
% dlvhex call:
%   dlvhex -filter=pred1,pred2 [name of hex file]
