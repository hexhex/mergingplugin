% -------------------- Mappings for belief bases -------------------- 
% Belief base "kb1"
sources(kb1, AnswerNr) :- &hex["
     
	root(root).
	innernode(root).
	innernode(v1).
	innernode(v2).
	leafnode(leaf1, class1).
	leafnode(leaf2, class2).
	conditionaledge(root, v1, x, \'<\', y).
	elseedge(root, v2).
	conditionaledge(v1, leaf1, z, \'<\', w).
	elseedge(v1, leaf2).
	conditionaledge(v2, leaf1, z, \'<\', w).
	elseedge(v2, leaf2).

", ""](AnswerNr).


% -------------------- Revision plan -------------------- 
% Using belief base kb1
results(result_kb1, AnswerNr) :- sources(kb1, AnswerNr).

 % Merging the following sources: result_kb1
 %    Answers passed to the operator
answersets_arg_kb1(0, R1) :- results(result_kb1, R1).
 %    key-value arguments for the operator

 %    Actual merging
results(result_unfold_kb1, AnswerNr) :- &operator["unfold", answersets_arg_kb1, kv_arg_kb1](AnswerNr).

% Final result
finalresult(AnswerNr) :- results(result_unfold_kb1, AnswerNr).


% ---------- Extraction of final answer sets ---------- 
finalanswersets(AnswerNr, AnswerSetNr) :- finalresult(AnswerNr), &answersets[AnswerNr](AnswerSetNr).
% Each answer set can be selected or not
selectedas(AnswerSetNr) v -selectedas(AnswerSetNr) :- finalanswersets(AnswerNr, AnswerSetNr).

% Select exactly one:
%    Select at least one
atleastoneasselected :- selectedas(AnswerSetNr).
:- not atleastoneasselected.
%    Select at most one
:- selectedas(AnswerSetNr1), selectedas(AnswerSetNr2), AnswerSetNr1 != AnswerSetNr2.

% Take content of the selected virtual answer set and transfer it into the "real" answer sets of the hex program
%    root with arity 1
root(Arg0) :- finalresult(AnswerNr), selectedas(AnswerSetNr), &arguments[AnswerNr, AnswerSetNr, "root"](RunningNr, 0, Arg0).
%    innernode with arity 1
innernode(Arg0) :- finalresult(AnswerNr), selectedas(AnswerSetNr), &arguments[AnswerNr, AnswerSetNr, "innernode"](RunningNr, 0, Arg0).
%    leafnode with arity 2
leafnode(Arg0, Arg1) :- finalresult(AnswerNr), selectedas(AnswerSetNr), &arguments[AnswerNr, AnswerSetNr, "leafnode"](RunningNr, 0, Arg0), &arguments[AnswerNr, AnswerSetNr, "leafnode"](RunningNr, 1, Arg1).
%    conditionaledge with arity 5
conditionaledge(Arg0, Arg1, Arg2, Arg3, Arg4) :- finalresult(AnswerNr), selectedas(AnswerSetNr), &arguments[AnswerNr, AnswerSetNr, "conditionaledge"](RunningNr, 0, Arg0), &arguments[AnswerNr, AnswerSetNr, "conditionaledge"](RunningNr, 1, Arg1), &arguments[AnswerNr, AnswerSetNr, "conditionaledge"](RunningNr, 2, Arg2), &arguments[AnswerNr, AnswerSetNr, "conditionaledge"](RunningNr, 3, Arg3), &arguments[AnswerNr, AnswerSetNr, "conditionaledge"](RunningNr, 4, Arg4).
%    elseedge with arity 2
elseedge(Arg0, Arg1) :- finalresult(AnswerNr), selectedas(AnswerSetNr), &arguments[AnswerNr, AnswerSetNr, "elseedge"](RunningNr, 0, Arg0), &arguments[AnswerNr, AnswerSetNr, "elseedge"](RunningNr, 1, Arg1).


% -------------------- Additional information --------------------
% dlvhex call:
%   dlvhex -filter=root,innernode,leafnode,conditionaledge,elseedge [name of hex file]
